[tool.poetry]
name = "udacity-cv"
version = "0.1.0"
description = ""
authors = ["Ian Thomas <thomasian06@gmail.com>"]
readme = "README.md"
packages = [{ include = "udacity_cv" }]


[tool.poetry.dependencies]
python = ">=3.8,<3.9"
tensorflow = ">=2.5,<2.6"
tf-models-official = "<2.6"
tensorflow-io = "<0.20.0"
ipykernel = "^6.24.0"
pycocotools = "^2.0.6"
pillow = "7.2.0"
ray = "^2.5.1"
waymo-open-dataset-tf-2-5-0 = "^1.4.1"

# TensorRT
tensorrt = "^8.6.1"
tensorrt-bindings = "^8.6.1"
tensorrt-libs = "^8.6.1"
nvidia-cublas-cu12 = "^12.2.1.16"
nvidia-cuda-runtime-cu12 = "^12.2.53"
nvidia-cudnn-cu12 = "^8.9.2.26"

# object-detection API
pyparsing = "2.4.7"
sacrebleu = "<=2.2.0"
keras = "<2.6.0"
scipy = "^1.10.1"
pandas = "^1.3.3"
avro-python3 = "^1.10.2"
apache-beam = "^2.48.0"
lxml = "^4.9.3"
matplotlib = "^3.6.3"
cython = "^0.29.36"
contextlib2 = "^21.6.0"
lvis = "^0.5.3"


[tool.poetry.group.dev]
optional = true


[tool.poetry.group.dev.dependencies]
black = "<22.0"
isort = "^5.12.0"
ruff = "^0.0.277"

pre-commit = "^3.3.3"


[tool.isort]
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
skip = []


[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
force-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.mypy_cache
    | \.pytest_cache
  )/
  | .gitignore
  | .pre-commit-config.yaml
  | pyproject.toml
  | poetry.lock
  | readme.md
)
'''


[tool.ruff]
target-version = "py38"
line-length = 120

select = [
    "F",
    "E",
    "N",
    "D",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "PL",
    "RUF",
]


ignore = [
    "D212", # Multi line docstring should start at first line
    "D203", # One blank line before class
]


[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D417",   # Docstring
    "S101",   # Use of assert method
    "ANN001", # Missing type annotation for function argument
    "ANN001", # Missing return type annotation for public function
]


[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root-validator",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
